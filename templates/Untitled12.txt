
    # Load and preprocess the data
    df = pd.read_excel(r"C:\Users\vamsi\Music\new\Dataset\sttds.xlsx")

    # Prepare the data for product recommendation
    product_features = ['QUANTITY', 'RATINGS', 'PRICE']  # Add relevant features for product recommendation
    product_target = 'PRODUCT NAME'  # Target variable for product recommendation

    # Split the data for product recommendation
    product_train_data, product_test_data = train_test_split(df, test_size=0.2, random_state=42)

    # Feature engineering for product recommendation
    product_train_features = product_train_data[product_features]
    product_train_target = product_train_data[product_target]

    # Encode categorical features if necessary
    label_encoder = LabelEncoder()
    for feature in product_features:
        if product_train_features[feature].dtype == 'object':
            product_train_features[feature] = label_encoder.fit_transform(product_train_features[feature])

    product_encoder = LabelEncoder()
    product_encoder.fit(product_train_target)

    # Convert the target variable to a binary matrix using MultiLabelBinarizer
    mlb = MultiLabelBinarizer()
    product_train_target_encoded = mlb.fit_transform(product_train_target.apply(lambda x: [x]))

    # Train the Random Forest model for product recommendation
    product_rf_model = RandomForestRegressor()
    product_rf_model.fit(product_train_features, product_train_target_encoded)


    # Prepare the data for offer recommendation
    offer_features = ['QUANTITY', 'RATINGS', 'PRICE']  # Add relevant features for offer recommendation
    offer_target = ' OFFER ID'  # Target variable for offer recommendation

    # Split the data for offer recommendation
    offer_train_data, offer_test_data = train_test_split(df, test_size=0.2, random_state=42)

    # Encode the 'OFFER ID' column
    offer_target_encoded = label_encoder.fit_transform(offer_train_data[' OFFER ID'])

    # Create 'OFFER DISCOUNT' column in offer_train_data DataFrame
    offer_train_data['OFFER DISCOUNT'] = offer_train_data['PRICE'] * (1 - offer_target_encoded)

    # Feature engineering for offer recommendation
    offer_train_features = offer_train_data[offer_features]
    offer_train_target = offer_train_data[' OFFER ID']

    # Encode categorical features if necessary
    for feature in offer_train_features.columns:
        if offer_train_features[feature].dtype == 'object':
            offer_train_features[feature] = label_encoder.fit_transform(offer_train_features[feature])

    # Encode target variable
    offer_target_encoded = label_encoder.fit_transform(offer_train_target)

    # Train the Random Forest model for offer recommendation
    offer_rf_model = RandomForestRegressor()
    offer_rf_model.fit(offer_train_features, offer_target_encoded)


    def recommend_products_and_offers(user_features):
        # Convert user features to a numpy array
        user_feature = np.array(user_features).reshape(1, -1)

        # Encode categorical features if necessary
        for i, feature_ in enumerate(user_feature[0]):
            if isinstance(feature_, str):
                user_feature[0][i] = label_encoder.transform([feature_])[0]

        # Use the trained models to make predictions
        product_prediction = product_rf_model.predict(user_feature)
        offer_prediction = offer_rf_model.predict(user_feature)

        # Get the recommended product and offer indices
        product_index = np.argmax(product_prediction)
        offer_index = np.argmax(offer_prediction)

        # Get the recommended product and offer names
        product_recommendations = product_encoder.inverse_transform([product_index])[0]
        offer_recommendations = offer_train_data.loc[offer_train_data[' OFFER ID'] == offer_index, ' OFFER ID'].values[0]

        # Get the recommended offer discount
        offer_discounts = offer_train_data.loc[offer_train_data[' OFFER ID'] == offer_recommendations, 'OFFER DISCOUNT'].values[0]

        return product_recommendations, offer_recommendations, offer_discounts


















        # Load the customer data from the database
        customers = Customer.query.all()

        # Convert the customer data into a pandas DataFrame
        customer_data = pd.DataFrame([(customer.name, customer.email) for customer in customers], columns=['Name', 'Email'])




        # Function to send email
        def send_email(customer_email, product_recommendations, offer_recommendations, offer_discounts):
            # Compose the email message
            message = MIMEMultipart()
            message['From'] = 'your_email@example.com'  # Replace with your email address
            message['To'] = customer_email
            message['Subject'] = 'Product Recommendation and Offer'

            # Email body
            email_body = f"Dear Customer,\n\nWe recommend the following product:\n\nProduct: {product_recommendations}\nOffer: {offer_recommendations}\nDiscount: {offer_discounts}%\n\nThank you for shopping with us!\n\nBest Regards,\nThe Admin Team"

            message.attach(MIMEText(email_body, 'plain'))

            # Connect to the SMTP server and send the email
            smtp_server = 'your_smtp_server'
            smtp_port = 587  # Replace with the appropriate SMTP port
            smtp_username = 'your_username'  # Replace with your SMTP username
            smtp_password = 'your_password'  # Replace with your SMTP password

            with smtplib.SMTP(smtp_server, smtp_port) as server:
                server.starttls()
                server.login(smtp_username, smtp_password)
                server.sendmail(message['From'], message['To'], message.as_string())

        # Iterate over each customer
        for customer in customers:
            # Retrieve the customer's purchase history from the database
            purchases = Purchase.query.filter_by(customer_id=customer.id).all()

            # Convert the purchase history into a pandas DataFrame
            purchase_data = pd.DataFrame([(purchase.product_name, purchase.ratings, purchase.price) for purchase in purchases], columns=['Product Name', 'Ratings', 'Price'])

            # Perform product and offer recommendations based on the purchase history
            user_features = [purchase_data['Ratings'].mean(), purchase_data['Price'].mean()]  # Example: Using average ratings and average price
            product_recommendation, offer_recommendation, offer_discount = recommend_products_and_offers(user_features)

            # Send the recommendation email to the customer
            send_email(customer.email, product_recommendation, offer_recommendation, offer_discount)


